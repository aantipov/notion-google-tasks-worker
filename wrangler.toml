name = "notion-gtasks-worker"
main = "src/index.ts"
compatibility_date = "2024-01-09"

workers_dev = false

tail_consumers = [{service = "notion-gtasks-worker-tail"}]

[env.production.vars]

[triggers]
crons = ["* * * * *", "0 8 * * *",  "0 9 * * *"]

[[queues.producers]]
binding = "QUEUE"
queue = "notion-gtasks"

[[queues.consumers]]
queue = "notion-gtasks"
max_batch_size = 1 # optional: defaults to 10
max_batch_timeout = 5 # optional: defaults to 5 seconds
max_retries = 0

[[d1_databases]]
binding = "DB"
database_name = "notion-gtasks"
database_id = "22e7ad09-c2ae-4374-85f6-6f26b9a5fb5e" # wrangler d1 info YOUR_DATABASE_NAME

# Bind a KV Namespace. Use KV as persistent storage for small key-value pairs.
# Docs: https://developers.cloudflare.com/workers/runtime-apis/kv
# [[kv_namespaces]]
# binding = "BINDING_NAME"
# id = ""


# Bind an R2 Bucket. Use R2 to store arbitrarily large blobs of data, such as files.
# Docs: https://developers.cloudflare.com/r2/api/workers/workers-api-usage/
# [[r2_buckets]]
# binding = "MY_BUCKET"
# bucket_name = "my-bucket"

# Bind another Worker service. Use this binding to call another Worker without network overhead.
# Docs: https://developers.cloudflare.com/workers/platform/services
# [[services]]
# binding = "MY_SERVICE"
# service = "my-service"

# Bind a Durable Object. Durable objects are a scale-to-zero compute primitive based on the actor model.
# Durable Objects can live for as long as needed. Use these when you need a long-running "server", such as in realtime apps.
# Docs: https://developers.cloudflare.com/workers/runtime-apis/durable-objects
# [[durable_objects.bindings]]
# name = "MY_DURABLE_OBJECT"
# class_name = "MyDurableObject"

# Durable Object migrations.
# Docs: https://developers.cloudflare.com/workers/learning/using-durable-objects#configure-durable-object-classes-with-migrations
# [[migrations]]
# tag = "v1"
# new_classes = ["MyDurableObject"]
